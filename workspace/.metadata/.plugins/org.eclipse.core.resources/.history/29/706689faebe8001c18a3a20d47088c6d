package com.cos.blog.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

@SuppressWarnings("deprecation")
@Configuration	//빈 등록 : 스프링 컨테이너에서 객체를 관리할 수 있게 하는 것(IoC관리)
@EnableWebSecurity	//시큐리티 필터가 등록이 된다.
@EnableGlobalMethodSecurity(prePostEnabled = true)	// 특정 주소로 접근을 하면 권한 및 인증을 미리 체크하겠다는 뜻.
public class SecurityConfig extends WebSecurityConfigurerAdapter{

	@Bean	// 함수가 리턴하는 값을 스프링이 관리. 필요할 때 마다 사용하면 됨. IoC가 되요
	public BCryptPasswordEncoder encodePWD() {
		return new BCryptPasswordEncoder();
	}
	
	
	@Override
	protected void configure(HttpSecurity http) throws Exception {
		http
			.csrf().disable()	// csrf 토큰 비활성화 (테스트시 걸어두는 게 좋음)
			.authorizeRequests()	//request가 들어올때
				.antMatchers("/", "/auth/**" ,"/js/**" , "/css/**" , "/image/**")	//auth쪽으로 들어오는건 다 허락해준다.
				.permitAll()
				.anyRequest()	//이게 아닌 다른 모든 요청은
				.authenticated()	//인증이 되야함
			.and()
				.formLogin()
				.loginPage("/auth/loginForm")
				.loginProcessingUrl("/auth/loginProc")	//스프링 시큐리티가 해당 로그인을 가로챈다.		
				.defaultSuccessUrl("/");	
	}
}
